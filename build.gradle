plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'checkstyle'
	id 'jacoco'
}

checkstyle {
	checkstyleTest.enabled = false
}

group = 'com.sankha'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.kafka:spring-kafka'
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'org.flywaydb:flyway-mysql'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.security:spring-security-test'

}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
jacoco {
	toolVersion = "0.8.9"
}

task installPreCommitHook(type: Copy){
	from new File(rootProject.rootDir, 'scripts/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks')}
	fileMode 0775
}

task installPrePushHook(type: Copy){
	from new File(rootProject.rootDir, 'scripts/pre-push')
	into { new File(rootProject.rootDir, '.git/hooks')}
	fileMode 0775
}

jacocoTestReport {
	dependsOn test
}
jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.7
			}
		}
	}
}

jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/sankha/userService/UserServiceApplication.class",
			])
		}))
	}
}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification